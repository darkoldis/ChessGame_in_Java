/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.radimkolacny.chess.forms;

import cz.radimkolacny.chess.figures.Figure;
import cz.radimkolacny.chess.managers.FileManager;
import cz.radimkolacny.chess.gamefield.Board;
import cz.radimkolacny.chess.ChessGame;
import cz.radimkolacny.chess.gamefield.Player;
import cz.radimkolacny.chess.TextCompiler;
import java.awt.Dimension;
import javax.swing.BoxLayout;

/**
 *
 * @author radimkolacny
 */
public class ChessJFrame extends javax.swing.JFrame {
    
    public ChessJFrame(){
        super();
    }
    /**
     * Creates new form ChessJFrame
     * @param newGameDialog
     */
    public ChessJFrame(NewGameJDialog newGameDialog) {
        super();
        
        newGame = newGameDialog;
        
        chessGame = new ChessGame(this, newGame.getFirstName(), newGame.getSecondName());
        
        initComponents();
        
        GameBoardJPanel.setSize(new Dimension(Board.getSIDE(),Board.getSIDE()));
        
        setupComponents();
        
        setupFrame();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        figureForChangeJPopupMenu = new javax.swing.JPopupMenu();
        queenJMenuItem = new javax.swing.JMenuItem();
        rookJMenuItem = new javax.swing.JMenuItem();
        knightJMenuItem = new javax.swing.JMenuItem();
        bishopJMenuItem = new javax.swing.JMenuItem();
        mainJPanel = new javax.swing.JPanel();
        GameBoardJPanel = chessGame.getGameManager().getBoard();
        whiteFiguresCapturedJPanel = chessGame.getGameManager().getCapturedWhite();
        blackPlayerJLabel = new javax.swing.JLabel();
        whitePlayerJLabel = new javax.swing.JLabel();
        blackFiguresCapturedJPanel = chessGame.getGameManager().getCapturedBlack();

        figureForChangeJPopupMenu.add(queenJMenuItem);
        figureForChangeJPopupMenu.add(rookJMenuItem);
        figureForChangeJPopupMenu.add(knightJMenuItem);
        figureForChangeJPopupMenu.add(bishopJMenuItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CHESS");
        setBackground(new java.awt.Color(153, 153, 153));
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setMaximizedBounds(new java.awt.Rectangle(0, 0, 600, 600));

        mainJPanel.setBackground(new java.awt.Color(204, 204, 204));

        GameBoardJPanel.setAlignmentX(0.0F);
        GameBoardJPanel.setAlignmentY(0.0F);
        GameBoardJPanel.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        GameBoardJPanel.setLocation(new java.awt.Point(10, 0));
        GameBoardJPanel.setPreferredSize(new java.awt.Dimension(400, 400));
        GameBoardJPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GameBoardJPanelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout GameBoardJPanelLayout = new javax.swing.GroupLayout(GameBoardJPanel);
        GameBoardJPanel.setLayout(GameBoardJPanelLayout);
        GameBoardJPanelLayout.setHorizontalGroup(
            GameBoardJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        GameBoardJPanelLayout.setVerticalGroup(
            GameBoardJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );

        whiteFiguresCapturedJPanel.setBackground(new java.awt.Color(204, 204, 204));
        whiteFiguresCapturedJPanel.setAlignmentX(0.0F);
        whiteFiguresCapturedJPanel.setAlignmentY(0.0F);
        whiteFiguresCapturedJPanel.setPreferredSize(new java.awt.Dimension(450, 30));

        javax.swing.GroupLayout whiteFiguresCapturedJPanelLayout = new javax.swing.GroupLayout(whiteFiguresCapturedJPanel);
        whiteFiguresCapturedJPanel.setLayout(whiteFiguresCapturedJPanelLayout);
        whiteFiguresCapturedJPanelLayout.setHorizontalGroup(
            whiteFiguresCapturedJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        whiteFiguresCapturedJPanelLayout.setVerticalGroup(
            whiteFiguresCapturedJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );

        blackPlayerJLabel.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        blackPlayerJLabel.setAlignmentY(0.0F);
        blackPlayerJLabel.setMaximumSize(new java.awt.Dimension(450, 0));
        blackPlayerJLabel.setSize(new java.awt.Dimension(450, 16));

        whitePlayerJLabel.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        whitePlayerJLabel.setAlignmentY(0.0F);

        blackFiguresCapturedJPanel.setBackground(new java.awt.Color(204, 204, 204));
        blackFiguresCapturedJPanel.setAlignmentX(0.0F);
        blackFiguresCapturedJPanel.setAlignmentY(0.0F);
        blackFiguresCapturedJPanel.setPreferredSize(new java.awt.Dimension(450, 40));

        javax.swing.GroupLayout blackFiguresCapturedJPanelLayout = new javax.swing.GroupLayout(blackFiguresCapturedJPanel);
        blackFiguresCapturedJPanel.setLayout(blackFiguresCapturedJPanelLayout);
        blackFiguresCapturedJPanelLayout.setHorizontalGroup(
            blackFiguresCapturedJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        blackFiguresCapturedJPanelLayout.setVerticalGroup(
            blackFiguresCapturedJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 30, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout mainJPanelLayout = new javax.swing.GroupLayout(mainJPanel);
        mainJPanel.setLayout(mainJPanelLayout);
        mainJPanelLayout.setHorizontalGroup(
            mainJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainJPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(mainJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(blackFiguresCapturedJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(whitePlayerJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(blackPlayerJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(whiteFiguresCapturedJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(GameBoardJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(58, Short.MAX_VALUE))
        );
        mainJPanelLayout.setVerticalGroup(
            mainJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainJPanelLayout.createSequentialGroup()
                .addComponent(blackPlayerJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(whiteFiguresCapturedJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(GameBoardJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(whitePlayerJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(blackFiguresCapturedJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void setupComponents(){

        mainJPanel.setPreferredSize(new Dimension(GameBoardJPanel.getPreferredSize().width, 600));
        mainJPanel.setLayout(new BoxLayout(mainJPanel, BoxLayout.Y_AXIS));
 
        
        mainJPanel.add(blackPlayerJLabel);
        mainJPanel.add(whiteFiguresCapturedJPanel);
        
        mainJPanel.add(GameBoardJPanel);

        mainJPanel.add(whitePlayerJLabel);
        mainJPanel.add(blackFiguresCapturedJPanel);
        
        
        blackPlayerJLabel.setText(chessGame.getGameManager().getBlackPlayer().getName());
        whitePlayerJLabel.setText(chessGame.getGameManager().getWhitePlayer().getName());
        
        this.getContentPane().setLayout(new BoxLayout(this.getContentPane(), BoxLayout.Y_AXIS));
        
        setPreferredSize(new Dimension(mainJPanel.getPreferredSize().width, 600));
    }
    
    private void setupFrame(){
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        this.pack();
        this.setVisible(true);
    }
    /**
     * Method for click on board
     * Take coordinates of click and sent them for manipulate to chess game
     * @param evt 
     */
    private void GameBoardJPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GameBoardJPanelMouseClicked
        int x = evt.getX();
        int y = evt.getY();
        //  call click method for manipulate with coordinates od click
        chessGame.click(x , y);
        chessGame.getGameManager().getBoard().repaint();
        chessGame.getGameManager().getCapturedBlack().repaint();
        chessGame.getGameManager().getCapturedWhite().repaint();
        
        if(chessGame.getGameManager().isEndGame()){
            endGameSetup();
        }
    }//GEN-LAST:event_GameBoardJPanelMouseClicked

    private void endGameSetup(){
        Player winner = chessGame.getGameManager().getPlayerOnTurn();
        Player losser = chessGame.getGameManager().getSecondPlayer(winner);
        String typeEndGame = chessGame.getGameManager().getMoveControler().getTypeOfEndGame();
        saveResultOfGame(winner, losser, typeEndGame);
        showEndGameDialog(winner, losser, typeEndGame);
    }
    private void saveResultOfGame(Player winner, Player losser, String typeEndGame){
        FileManager fileManager = newGame.getMainMenu().getFileManager();
        fileManager.saveResultOfGame(winner, losser, typeEndGame);
    }
    private void showEndGameDialog(Player winner, Player losser, String typeEndGame){
        TextCompiler.createTextForOutput(winner, losser, typeEndGame);
        endGameDialog = new EndGameJDialog(this, true);
        endGameDialog.setVisible(true);
        dispose();
    }
    public String showFiguresForPromote(Figure selectedFigure) {
        menuForChooseFigure = new PromotePawnJDialog(this, true);
        return menuForChooseFigure.getSelectFigureForPromote();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChessJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

    }
    /**
     * Instance of chess game
     */
    private NewGameJDialog newGame = null;
    private ChessGame chessGame = null;
    private EndGameJDialog endGameDialog = null;
    private PromotePawnJDialog menuForChooseFigure;

    public NewGameJDialog getNewGame() {
        return newGame;
    }

    public void setNewGame(NewGameJDialog newGame) {
        this.newGame = newGame;
        setChessGame(new ChessGame(this, newGame.getFirstName(), newGame.getSecondName()));
    }

    public ChessGame getChessGame() {
        return chessGame;
    }

    public void setChessGame(ChessGame chessGame) {
        this.chessGame = chessGame;
    }

    public EndGameJDialog getEndGameDialog() {
        return endGameDialog;
    }

    public void setEndGameDialog(EndGameJDialog endGameDialog) {
        this.endGameDialog = endGameDialog;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel GameBoardJPanel;
    private javax.swing.JMenuItem bishopJMenuItem;
    private javax.swing.JPanel blackFiguresCapturedJPanel;
    private javax.swing.JLabel blackPlayerJLabel;
    private javax.swing.JPopupMenu figureForChangeJPopupMenu;
    private javax.swing.JMenuItem knightJMenuItem;
    private javax.swing.JPanel mainJPanel;
    private javax.swing.JMenuItem queenJMenuItem;
    private javax.swing.JMenuItem rookJMenuItem;
    private javax.swing.JPanel whiteFiguresCapturedJPanel;
    private javax.swing.JLabel whitePlayerJLabel;
    // End of variables declaration//GEN-END:variables
}